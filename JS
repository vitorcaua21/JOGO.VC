const game = document.getElementById("game");
const player = document.getElementById("player");
const scoreText = document.getElementById("score");
const overlay = document.getElementById("overlay");
const restartBtn = document.getElementById("restartBtn");

let bullets = [];
let enemies = [];
let score = 0;
let isGameOver = false;

let playerX = window.innerWidth / 2 - 20;
const playerSpeed = 7;
const playerWidth = 40;
const bulletSpeed = 10;
const enemySpeed = 3;

const keys = {};

document.addEventListener("keydown", (e) => (keys[e.code] = true));
document.addEventListener("keyup", (e) => (keys[e.code] = false));

// Posiciona player
function setPlayerPos() {
  player.style.left = `${playerX}px`;
}

// Movimento player
function movePlayer() {
  if (keys["ArrowLeft"] && playerX > 0) playerX -= playerSpeed;
  if (keys["ArrowRight"] && playerX < window.innerWidth - playerWidth)
    playerX += playerSpeed;
  setPlayerPos();
}

// Atirar
function shoot() {
  if (keys["Space"]) {
    const bullet = document.createElement("div");
    bullet.classList.add("bullet");
    bullet.style.left = `${playerX + playerWidth / 2 - 3}px`;
    bullet.style.bottom = `60px`;
    game.appendChild(bullet);
    bullets.push(bullet);
    keys["Space"] = false;
  }
}

// Movimenta tiros
function moveBullets() {
  bullets.forEach((b, i) => {
    const bottom = parseInt(b.style.bottom) + bulletSpeed;
    b.style.bottom = bottom + "px";
    if (bottom > window.innerHeight) {
      b.remove();
      bullets.splice(i, 1);
    }
  });
}

// Spawn inimigos
function spawnEnemy() {
  if (Math.random() < 0.02) {
    const enemy = document.createElement("div");
    enemy.classList.add("enemy");
    enemy.style.left = `${Math.random() * (window.innerWidth - 40)}px`;
    enemy.style.top = "0px";
    game.appendChild(enemy);
    enemies.push(enemy);
  }
}

// Move inimigos
function moveEnemies() {
  if (isGameOver) return; // impede game over logo após reset
  enemies.forEach((e, i) => {
    const top = parseInt(e.style.top) + enemySpeed;
    e.style.top = top + "px";
    if (top > window.innerHeight - 60) gameOver();
  });
}

// Colisões
function checkCollisions() {
  enemies.forEach((e, ei) => {
    const eRect = e.getBoundingClientRect();
    bullets.forEach((b, bi) => {
      const bRect = b.getBoundingClientRect();
      if (
        !(
          bRect.right < eRect.left ||
          bRect.left > eRect.right ||
          bRect.bottom < eRect.top ||
          bRect.top > eRect.bottom
        )
      ) {
        e.remove();
        b.remove();
        enemies.splice(ei, 1);
        bullets.splice(bi, 1);
        score++;
        scoreText.innerText = `Score: ${score}`;
      }
    });

    const pRect = player.getBoundingClientRect();
    if (
      !(
        pRect.right < eRect.left ||
        pRect.left > eRect.right ||
        pRect.bottom < eRect.top ||
        pRect.top > eRect.bottom
      )
    ) {
      gameOver();
    }
  });
}

// Game Over
function gameOver() {
  isGameOver = true;
  overlay.classList.remove("hidden");
}

// Reset jogo
function resetGame() {
  bullets.forEach((b) => b.remove());
  bullets = [];
  enemies.forEach((e) => e.remove());
  enemies = [];
  score = 0;
  scoreText.innerText = `Score: 0`;
  playerX = window.innerWidth / 2 - 20;
  setPlayerPos();
  isGameOver = false;
  overlay.classList.add("hidden");
}

// Loop
function update() {
  if (!isGameOver) {
    movePlayer();
    shoot();
    moveBullets();
    spawnEnemy();
    moveEnemies();
    checkCollisions();
  }
  requestAnimationFrame(update);
}

document.addEventListener("keydown", (e) => {
  if (e.code === "Enter" && isGameOver) resetGame();
});

restartBtn.addEventListener("click", resetGame);

update();
